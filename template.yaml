AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  EchoStream Analytics - Foundational resources including S3 data lake,
  DynamoDB table, and IAM roles.

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: python3.11
    Architectures:
      - arm64 # Use Graviton2 for better price-performance 

Resources:
  NltkLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: EchoStream-NltkLayer
      ContentUri: layers/nltk_layer/
      CompatibleRuntimes:
        - python3.11
  # ------------------------------------------------------------
  # API Gateway (HTTP API)
  # ------------------------------------------------------------
  HttpApi:
    Type: AWS::Serverless::HttpApi

  # ------------------------------------------------------------
  # S3 Data Lake Bucket
  # ------------------------------------------------------------
  DataLakeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "echostream-datalake-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ------------------------------------------------------------
  # DynamoDB Table for Real-time Analytics
  # ------------------------------------------------------------
  DataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EchoStreamDataTable
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # ------------------------------------------------------------
  # Lambda Functions and Roles
  # ------------------------------------------------------------
  ProducerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Producer
      CodeUri: producer/
      Handler: app.lambda_handler
      Role: !GetAtt ProducerLambdaRole.Arn
      Environment:
        Variables:
          API_ENDPOINT_URL: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/ingest"

  ProducerLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow
                    Principal: { Service: [lambda.amazonaws.com] }
                    Action: [sts:AssumeRole]
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Policies:
            - PolicyName: EchoStreamProducerPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - execute-api:Invoke
                    Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"

  ProcessorLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Processor
      CodeUri: processor/
      Handler: app.lambda_handler
      Role: !GetAtt ProcessorLambdaRole.Arn
      Layers:
        - !Ref NltkLayer
      Environment:
        Variables:
          DATA_LAKE_BUCKET: !Ref DataLakeBucket
          DATA_TABLE: !Ref DataTable
          SENTIMENT_ENGINE: nltk
      Events:
        IngestApiEvent:
          Type: HttpApi
          Properties:
            Path: /ingest
            Method: post
            ApiId: !Ref HttpApi

  ProcessorLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow
                    Principal: { Service: [lambda.amazonaws.com] }
                    Action: [sts:AssumeRole]
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Policies:
            - PolicyName: EchoStreamProcessorPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: [s3:PutObject]
                    Resource: !Sub "${DataLakeBucket.Arn}/*"
                  - Effect: Allow
                    Action: [dynamodb:BatchWriteItem]
                    Resource: !GetAtt DataTable.Arn
                  - Effect: Allow
                    Action:
                      - comprehend:DetectSentiment
                    Resource: "*"

  QueryLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Query
      CodeUri: query/
      Handler: app.lambda_handler
      Role: !GetAtt QueryLambdaRole.Arn
      Environment:
        Variables:
          DATA_TABLE: !Ref DataTable
      Events:
        QueryApiEvent:
          Type: HttpApi
          Properties:
            Path: /query
            Method: get
            ApiId: !Ref HttpApi

  QueryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EchoStreamQueryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !GetAtt DataTable.Arn