AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  EchoStream Analytics - Foundational resources including S3 data lake,
  DynamoDB table, and IAM roles.

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: python3.11
    Architectures:
      - arm64 # Use Graviton2 for better price-performance 

Resources:
  # ------------------------------------------------------------
  # Reddit
  # ------------------------------------------------------------
  RedditCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: echostream/reddit-credentials-v1
      Description: "Stores credentials for the Reddit API client."
      SecretString: '{"REDDIT_CLIENT_ID": "REPLACE_IN_CONSOLE", "REDDIT_CLIENT_SECRET": "REPLACE_IN_CONSOLE", "REDDIT_USER_AGENT": "REPLACE_IN_CONSOLE", "REDDIT_USERNAME": "REPLACE_IN_CONSOLE", "REDDIT_PASSWORD": "REPLACE_IN_CONSOLE"}'
  
  # ------------------------------------------------------------
  # NLTK
  # ------------------------------------------------------------
  # NltkLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: EchoStream-NltkLayer
  #     ContentUri: layers/nltk_layer/
  #     CompatibleRuntimes:
  #       - python3.11

  # ------------------------------------------------------------
  # API Gateway (HTTP API)
  # ------------------------------------------------------------
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          JwtAuthorizer:
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
              audience:
                - !Ref UserPoolClient
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: JwtAuthorizer
  
  # ------------------------------------------------------------
  # Cognito User Pool for Multi-Tenancy
  # ------------------------------------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: EchoStream-UserPool
      AliasAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: tenant_id
          AttributeDataType: String
          Mutable: false
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: EchoStream-WebClient
      GenerateSecret: false # Not needed for a public web client

  # ------------------------------------------------------------
  # Kinesis Data Stream
  # ------------------------------------------------------------
  DataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: EchoStream-DataStream
      ShardCount: 1 # Start with 1 shard to stay in the free tier and control costs

  # ------------------------------------------------------------
  # S3 Data Lake Bucket
  # ------------------------------------------------------------
  DataLakeBucket:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "echostream-datalake-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ------------------------------------------------------------
  # DynamoDB Table for Real-time Analytics
  # ------------------------------------------------------------
  DataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EchoStreamDataTable
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # ------------------------------------------------------------
  # DynamoDB Table for Tenants Data
  # ------------------------------------------------------------
  TenantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EchoStream-TenantsTable
      AttributeDefinitions:
        - AttributeName: "tenant_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "tenant_id"
          KeyType: "HASH" # Partition Key
      BillingMode: PAY_PER_REQUEST

  # ------------------------------------------------------------
  # Lambda Functions and Roles
  # ------------------------------------------------------------
  ProducerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Producer
      CodeUri: producer/
      Handler: app.lambda_handler
      Role: !GetAtt ProducerLambdaRole.Arn
      Timeout: 30
      Environment:
        Variables:
          STREAM_NAME: !Ref DataStream
          SECRET_NAME: echostream/reddit-credentials-v1


  ProducerLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow
                    Principal: { Service: [lambda.amazonaws.com] }
                    Action: [sts:AssumeRole]
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Policies:
            - PolicyName: EchoStreamProducerPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow # Statement for Kinesis
                    Action:
                      - kinesis:PutRecord
                      - kinesis:PutRecords
                    Resource: !GetAtt DataStream.Arn
                  - Effect: Allow # Statement for Secrets Manager
                    Action:
                      - secretsmanager:GetSecretValue
                    Resource: !Ref RedditCredentialsSecret # Now references our new secret resource

  ProcessorLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Processor
      CodeUri: processor/
      Handler: app.lambda_handler
      Role: !GetAtt ProcessorLambdaRole.Arn
      # Layers:
      #  - !Ref NltkLayer
      Environment:
        Variables:
          DATA_LAKE_BUCKET: !Ref DataLakeBucket
          DATA_TABLE: !Ref DataTable
          SENTIMENT_ENGINE: comprehend # nltk
      Events:
        StreamEvent:
          Type: Kinesis
          Properties:
            Stream: !GetAtt DataStream.Arn
            BatchSize: 100
            StartingPosition: LATEST

  ProcessorLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow
                    Principal: { Service: [lambda.amazonaws.com] }
                    Action: [sts:AssumeRole]
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Policies:
            - PolicyName: EchoStreamProcessorPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: [s3:PutObject]
                    Resource: !Sub "${DataLakeBucket.Arn}/*"
                  - Effect: Allow
                    Action: [dynamodb:BatchWriteItem]
                    Resource: !GetAtt DataTable.Arn
                  - Effect: Allow
                    Action: [comprehend:DetectSentiment]
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - kinesis:GetRecords
                      - kinesis:GetShardIterator
                      - kinesis:DescribeStream
                      - kinesis:ListShards
                    Resource: !GetAtt DataStream.Arn

  QueryLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Query
      CodeUri: query/
      Handler: app.lambda_handler
      Role: !GetAtt QueryLambdaRole.Arn
      Environment:
        Variables:
          DATA_TABLE: !Ref DataTable
      Events:
        QueryApiEvent:
          Type: HttpApi
          Properties:
            Path: /query
            Method: get
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: JwtAuthorizer

  QueryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EchoStreamQueryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !GetAtt DataTable.Arn
  
  FrontendBucket:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Select [1, !Split ['://', !GetAtt FrontendBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_100 # Use only North America and Europe edge locations for cost savings