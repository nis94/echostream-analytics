AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  EchoStream Analytics - Foundational resources including S3 data lake,
  DynamoDB table, and IAM roles.

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: python3.11
    Architectures:
      - arm64 # Use Graviton2 for better price-performance 

Resources:
  # ------------------------------------------------------------
  # S3 Data Lake Bucket
  # ------------------------------------------------------------
  DataLakeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "echostream-datalake-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveAfter30Days
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER_IR # Use Glacier Instant Retrieval for cost savings 
                TransitionInDays: 30

  # ------------------------------------------------------------
  # DynamoDB Table for Real-time Analytics
  # ------------------------------------------------------------
  DataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EchoStreamDataTable
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"  # Partition Key
        - AttributeName: "SK"
          KeyType: "RANGE" # Sort Key
      BillingMode: PAY_PER_REQUEST # Crucial for our budget - scales to zero 
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # ------------------------------------------------------------
  # IAM Roles (Placeholders for now)
  # ------------------------------------------------------------
  ProducerLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                            - lambda.amazonaws.com
                    Action:
                        - sts:AssumeRole
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ProcessorLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                            - lambda.amazonaws.com
                    Action:
                        - sts:AssumeRole
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          # ---- ADD THIS ENTIRE 'Policies' SECTION ----
          Policies:
            - PolicyName: EchoStreamProcessorPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:PutObject
                    Resource: !Sub "${DataLakeBucket.Arn}/*"
                  - Effect: Allow
                    Action:
                      - dynamodb:BatchWriteItem
                    Resource: !GetAtt DataTable.Arn

  ProcessorLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Processor
      CodeUri: processor/
      Handler: app.lambda_handler
      Role: !GetAtt ProcessorLambdaRole.Arn
      Environment:
        Variables:
          DATA_LAKE_BUCKET: !Ref DataLakeBucket
          DATA_TABLE: !Ref DataTable