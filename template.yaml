AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  EchoStream Analytics - Foundational resources including S3 data lake,
  DynamoDB table, and IAM roles.

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: python3.11
    Architectures:
      - arm64 # Use Graviton2 for better price-performance 

Resources:
  # ------------------------------------------------------------
  # Reddit
  # ------------------------------------------------------------
  RedditCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: echostream/reddit-credentials-v1
      Description: "Stores credentials for the Reddit API client."
      SecretString: '{"REDDIT_CLIENT_ID": "REPLACE_IN_CONSOLE", "REDDIT_CLIENT_SECRET": "REPLACE_IN_CONSOLE", "REDDIT_USER_AGENT": "REPLACE_IN_CONSOLE", "REDDIT_USERNAME": "REPLACE_IN_CONSOLE", "REDDIT_PASSWORD": "REPLACE_IN_CONSOLE"}'
  
  # ------------------------------------------------------------
  # NLTK
  # ------------------------------------------------------------
  # NltkLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: EchoStream-NltkLayer
  #     ContentUri: layers/nltk_layer/
  #     CompatibleRuntimes:
  #       - python3.11

  # ------------------------------------------------------------
  # API Gateway (HTTP API)
  # ------------------------------------------------------------
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "*" # In production, you'd lock this to your CloudFront URL
        AllowHeaders:
          - "Authorization"
          - "Content-Type"
        AllowMethods:
          - GET
          - POST
          - OPTIONS
      Auth:
        Authorizers:
          JwtAuthorizer:
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
              audience:
                - !Ref UserPoolClient
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: JwtAuthorizer
  
  # ------------------------------------------------------------
  # Cognito User Pool for Multi-Tenancy
  # ------------------------------------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationLambdaFunction.Arn
      UserPoolName: EchoStream-UserPool
      AliasAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        SourceArn: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/echostreamtest@gmail.com"
        From: "EchoStream Analytics <echostreamtest@gmail.com>"
      Schema:
        - Name: tenant_id
          AttributeDataType: String
          Mutable: true
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: EchoStream-WebClient
      GenerateSecret: false # Not needed for a public web client
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  AdminsGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admins
      UserPoolId: !Ref UserPool
      Description: "Group for tenant administrators"

  # ------------------------------------------------------------
  # SQS
  # ------------------------------------------------------------
  IngestionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EchoStream-IngestionQueue
      VisibilityTimeout: 120 # Give the processor 2 minutes to process a message

  # ------------------------------------------------------------
  # S3 Data Lake Bucket
  # ------------------------------------------------------------
  DataLakeBucket:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "echostream-datalake-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ------------------------------------------------------------
  # DynamoDB Table for Real-time Analytics
  # ------------------------------------------------------------
  DataTable:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EchoStream-DataTable
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # ------------------------------------------------------------
  # DynamoDB Table for Tenants Data
  # ------------------------------------------------------------
  TenantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EchoStream-TenantsTable
      AttributeDefinitions:
        - AttributeName: "tenant_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "tenant_id"
          KeyType: "HASH" # Partition Key
      BillingMode: PAY_PER_REQUEST

  # ------------------------------------------------------------
  # CloudWatch Log Groups with Retention
  # ------------------------------------------------------------
  ProducerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/EchoStream-Producer
      RetentionInDays: 7

  ProcessorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/EchoStream-Processor
      RetentionInDays: 7

  QueryLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/EchoStream-Query
      RetentionInDays: 7

  # ------------------------------------------------------------
  # Lambda Functions and Roles
  # ------------------------------------------------------------
  ProducerLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn: ProducerLambdaLogGroup
    Properties:
      FunctionName: EchoStream-Producer
      CodeUri: producer/
      Handler: app.lambda_handler
      Role: !GetAtt ProducerLambdaRole.Arn
      Timeout: 30
      Environment:
        Variables:
          QUEUE_URL: !Ref IngestionQueue
          SECRET_NAME: echostream/reddit-credentials-v1
          TENANTS_TABLE_NAME: !Ref TenantsTable

  ProducerLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow
                    Principal: { Service: [lambda.amazonaws.com] }
                    Action: [sts:AssumeRole]
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Policies:
            - PolicyName: EchoStreamProducerPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sqs:SendMessage
                    Resource: !GetAtt IngestionQueue.Arn
                  - Effect: Allow # Statement for Secrets Manager
                    Action:
                      - secretsmanager:GetSecretValue
                    Resource: !Ref RedditCredentialsSecret # Now references our new secret resource
                  - Effect: Allow
                    Action:
                      - dynamodb:Scan
                    Resource: !GetAtt TenantsTable.Arn

  ProducerSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: EchoStream-15-Minute-Poll-Schedule
      Description: "Triggers the Producer Lambda every 15 minutes to fetch new data."
      ScheduleExpression: "rate(1 hour)"
      FlexibleTimeWindow:
        Mode: "OFF"
      State: "ENABLED"
      Target:
        Arn: !GetAtt ProducerLambdaFunction.Arn
        RoleArn: !GetAtt ProducerScheduleRole.Arn

  ProducerScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [scheduler.amazonaws.com] }
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: EchoStreamProducerSchedulerInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ProducerLambdaFunction.Arn

  ProcessorLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn: ProcessorLambdaLogGroup
    Properties:
      FunctionName: EchoStream-Processor
      CodeUri: processor/
      Handler: app.lambda_handler
      Role: !GetAtt ProcessorLambdaRole.Arn
      # Layers:
      #  - !Ref NltkLayer
      Environment:
        Variables:
          DATA_LAKE_BUCKET: !Ref DataLakeBucket
          DATA_TABLE: !Ref DataTable
          SENTIMENT_ENGINE: comprehend # nltk
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt IngestionQueue.Arn
            BatchSize: 10 # Process up to 10 messages at a time

  ProcessorLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow
                    Principal: { Service: [lambda.amazonaws.com] }
                    Action: [sts:AssumeRole]
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Policies:
            - PolicyName: EchoStreamProcessorPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: [s3:PutObject]
                    Resource: !Sub "${DataLakeBucket.Arn}/*"
                  - Effect: Allow
                    Action: [dynamodb:BatchWriteItem]
                    Resource: !GetAtt DataTable.Arn
                  - Effect: Allow
                    Action: [comprehend:DetectSentiment]
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - sqs:ReceiveMessage
                      - sqs:DeleteMessage
                      - sqs:GetQueueAttributes
                    Resource: !GetAtt IngestionQueue.Arn


  QueryLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn: QueryLambdaLogGroup
    Properties:
      FunctionName: EchoStream-Query
      CodeUri: query/
      Handler: app.lambda_handler
      Role: !GetAtt QueryLambdaRole.Arn
      Environment:
        Variables:
          DATA_TABLE: !Ref DataTable
      Events:
        QueryApiEvent:
          Type: HttpApi
          Properties:
            Path: /query
            Method: get
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: JwtAuthorizer

  QueryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EchoStreamQueryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !GetAtt DataTable.Arn

  TenantConfigLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-TenantConfig
      CodeUri: config/
      Handler: app.lambda_handler
      Role: !GetAtt TenantConfigLambdaRole.Arn
      Environment:
        Variables:
          TENANTS_TABLE_NAME: !Ref TenantsTable
      Events:
        ConfigApiEvent:
          Type: HttpApi
          Properties:
            Path: /config
            Method: get
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: JwtAuthorizer

  TenantConfigLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EchoStreamTenantConfigPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt TenantsTable.Arn
  
  FrontendBucket:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Select [1, !Split ['://', !GetAtt FrontendBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_100 # Use only North America and Europe edge locations for cost savings

  SummarizerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Summarizer
      CodeUri: summarizer/
      Handler: app.lambda_handler
      Role: !GetAtt SummarizerLambdaRole.Arn
      Timeout: 120 # Give it more time for AI processing
      Environment:
        Variables:
          DATA_TABLE: !Ref DataTable
          TENANTS_TABLE: !Ref TenantsTable
          SENDER_EMAIL: "echostreamtest@gmail.com"

  SummarizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EchoStreamSummarizerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt DataTable.Arn
                  - !GetAtt TenantsTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                # This ARN is for the Claude 3 Sonnet model.
                Resource: "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0"
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"

  SummarizerSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: EchoStream-Daily-Summary-Schedule
      Description: "Triggers the Summarizer Lambda once every day."
      ScheduleExpression: "cron(0 5 * * ? *)" # Runs every day at 5:00 AM UTC
      FlexibleTimeWindow:
        Mode: "OFF"
      State: "ENABLED"
      Target:
        Arn: !GetAtt SummarizerLambdaFunction.Arn
        RoleArn: !GetAtt SummarizerScheduleRole.Arn

  SummarizerScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [scheduler.amazonaws.com] }
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: EchoStreamSchedulerInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SummarizerLambdaFunction.Arn

  AlertingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EchoStreamAlertingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt DataTable.Arn
                  - !GetAtt TenantsTable.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"

  AlertingLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Alerting
      CodeUri: alerting/
      Handler: app.lambda_handler
      Role: !GetAtt AlertingLambdaRole.Arn
      Timeout: 60
      Environment:
        Variables:
          DATA_TABLE: !Ref DataTable
          TENANTS_TABLE: !Ref TenantsTable
          SENDER_EMAIL: "echostreamtest@gmail.com"

  AlertingSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: EchoStream-12-Hour-Alert-Schedule
      Description: "Triggers the Alerting Lambda every 12 hours."
      ScheduleExpression: "rate(12 hours)"
      FlexibleTimeWindow: { "Mode": "OFF" }
      State: "ENABLED"
      Target:
        Arn: !GetAtt AlertingLambdaFunction.Arn
        RoleArn: !GetAtt AlertingScheduleRole.Arn

  AlertingScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [scheduler.amazonaws.com] }
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: EchoStreamAlertingSchedulerInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [lambda:InvokeFunction]
                Resource: !GetAtt AlertingLambdaFunction.Arn

  SummaryLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-Summary
      CodeUri: summary/
      Handler: app.lambda_handler
      Role: !GetAtt SummaryLambdaRole.Arn
      Environment:
        Variables:
          TENANTS_TABLE_NAME: !Ref TenantsTable
      Events:
        SummaryApiEvent:
          Type: HttpApi
          Properties:
            Path: /summary
            Method: get
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: JwtAuthorizer

  SummaryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EchoStreamSummaryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt TenantsTable.Arn

  # You can add these resources at the end of your template's Resources section

  PostConfirmationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EchoStream-PostConfirmation
      CodeUri: post-confirmation/
      Handler: app.lambda_handler
      Role: !GetAtt PostConfirmationLambdaRole.Arn
      Environment:
        Variables:
          TENANTS_TABLE_NAME: !Ref TenantsTable

  PostConfirmationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EchoStreamPostConfirmationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt TenantsTable.Arn
              - Effect: Allow
                Action:
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminAddUserToGroup
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"

Outputs:
  HttpApiUrl:
    Description: "The invoke URL for the HTTP API"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  UserPoolId:
    Description: "The ID of the Cognito User Pool"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "The ID of the Cognito User Pool Client"
    Value: !Ref UserPoolClient
  ProducerLambdaName:
    Description: "The name of the Producer Lambda Function"
    Value: !Ref ProducerLambdaFunction
  RedditCredentialsSecretArn:
    Description: "The ARN of the Reddit credentials secret"
    Value: !Ref RedditCredentialsSecret
  TenantsTableName:
    Description: "The name of the Tenants DynamoDB table"
    Value: !Ref TenantsTable
  FrontendBucketName:
    Description: "The name of the S3 bucket for the frontend website"
    Value: !Ref FrontendBucket